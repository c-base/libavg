//
//  libavg - Media Playback Engine. 
//  Copyright (C) 2003-2008 Ulrich von Zadow
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Current versions can be found at www.libavg.de
//

void export_base();
void export_node();
void export_event();
#ifndef WIN32
void export_devices();
#endif
void export_anim();

#include "WrapHelper.h"

#include "../base/Logger.h"
#include "../base/OSHelper.h"
#include "../base/GeomHelper.h"
#include "../player/Player.h"
#include "../player/AVGNode.h"
#include "../player/DivNode.h"
#include "../player/TrackerEventSource.h"
#include "../player/TouchEvent.h"
#include "../player/TestHelper.h"
#include "../player/Canvas.h"
#include "../player/OffscreenCanvas.h"

#include <boost/version.hpp>
#include <boost/shared_ptr.hpp>

using namespace boost::python;
using namespace avg;
using namespace std;

BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(fakeMouseEvent_overloads, 
        TestHelper::fakeMouseEvent, 7, 8);

BOOST_PYTHON_MODULE(avg)
{
    docstring_options doc_options(true, false);

//    scope().attr("__doc__") =
//        "The main libavg module.\n\n";

    export_base();

    register_ptr_to_python<DivNodePtr>();
    register_ptr_to_python<CanvasNodePtr>();
    register_ptr_to_python<AVGNodePtr>();
    register_ptr_to_python<EventPtr>();
    register_ptr_to_python<MouseEventPtr>();
    register_ptr_to_python<TouchEventPtr>();

    def("getMemoryUsage", getMemoryUsage,
            "Returns the amount of memory used by the application in bytes. More\n"
            "precisely, this function returns the resident set size of the process\n"
            "in bytes. This does not include shared libraries or memory paged out to\n"
            "disk.\n");

    def("pointInPolygon", pointInPolygon,
            "Checks if a point is inside a polygon.\n"
            "\n"
            ":param point: Point to check.\n"
            ":type point: Point2D.\n"
            ":param poly: List of points which constitute a polygon to check against.\n"
            ":returns: True if point is inside, False otherwise.");

    class_<Logger>("Logger", 
            "Interface to the logger used by the avg player. Enables the setting\n"
            "of different logging categories. Categories can be set either by calling\n"
            "Logger.setCategories or by setting the AVG_LOG_CATEGORIES environment\n"
            "variable. Default categories are ERROR, WARNING, and APP. Log output\n"
            "is sent to the console (stderr).\n"
            "Each log entry contains the time the message was written, the category\n"
            "of the entry and the message itself.\n",
            no_init)
        .def("get", &Logger::get, 
                return_value_policy<reference_existing_object>(),
                "This method gives access to the logger. There is only one instance.\n")
        .staticmethod("get")
        .def("setCategories", &Logger::setCategories,
                "Sets the types of messages that should be logged.\n" 
                "@param categories: Or'ed list of categories. Possible categories are:\n"
                "    - NONE: No logging except for errors.\n"
                "    - BLTS: Display subsystem logging. Useful for timing/performance"
                "            measurements.\n"
                "    - PROFILE: Outputs performance statistics on player termination.\n"
                "    - PROFILE_LATEFRAMES: Outputs performance statistics whenever a"
                "                          frame is displayed late.\n"
                "    - EVENTS: Outputs basic event data.\n"
                "    - EVENTS2: Outputs all event data available.\n"
                "    - CONFIG: Outputs configuration data.\n"
                "    - WARNING: Outputs warning messages.\n"
                "    - ERROR: Outputs error messages. Can't be shut off.\n"
                "    - MEMORY: Outputs open/close information whenever a media file is\n"
                "              accessed.\n"
                "    - APP: Reserved for application-level messages issued by python\n"
                "           code.\n"
                "    - PLUGIN: Messages generated by loading plugins.\n"
                "    - PLAYER: General libavg playback messages.\n")
        .def("pushCategories", &Logger::pushCategories,
                "Pushes the current set of categories on an internal stack. Useful\n"
                "for saving and restoring the logging state so it can be changed\n"
                "for a short amount of time.\n")
        .def("popCategories", &Logger::popCategories,
                "Pops the current set of categories from the internal stack, restoring\n"
                "the state when the corresponding push was called.\n")
        .def("trace", &Logger::trace,
                "Logs message to the log if category is active.\n"
                "@param category: One of the categories listed for setCategories().\n"
                "Should in most cases be APP.\n"
                "@param message: The log message.\n")
        .def_readonly("NONE", &Logger::NONE)
        .def_readonly("BLTS", &Logger::BLTS)
        .def_readonly("PROFILE", &Logger::PROFILE)
        .def_readonly("PROFILE_LATEFRAMES", &Logger::PROFILE_LATEFRAMES)
        .def_readonly("EVENTS", &Logger::EVENTS)
        .def_readonly("EVENTS2", &Logger::EVENTS2)
        .def_readonly("CONFIG", &Logger::CONFIG)
        .def_readonly("WARNING", &Logger::WARNING)
        .def_readonly("ERROR", &Logger::ERROR)
        .def_readonly("MEMORY", &Logger::MEMORY)
        .def_readonly("APP", &Logger::APP)
        .def_readonly("PLUGIN", &Logger::PLUGIN)
    ;

#ifndef WIN32
    export_devices();
#endif
    export_event();
    export_node();
    export_anim();

    class_<TestHelper>("TestHelper", "Miscelaneous routines used by tests.", no_init)
        .def("fakeMouseEvent", &TestHelper::fakeMouseEvent, 
                fakeMouseEvent_overloads("speed"))
        .def("fakeTouchEvent", &TestHelper::fakeTouchEvent, "")
        .def("fakeKeyEvent", &TestHelper::fakeKeyEvent, "")
        .def("dumpObjects", &TestHelper::dumpObjects, "")
    ;

    class_<Player>("Player") 
        .def("get", &Player::get, 
                return_value_policy<reference_existing_object>())
        .staticmethod("get")
        .def("setResolution", &Player::setResolution)
        .def("setWindowFrame", &Player::setWindowFrame)
        .def("setWindowPos", &Player::setWindowPos)
        .def("setOGLOptions", &Player::setOGLOptions)
        .def("setMultiSampleSamples", &Player::setMultiSampleSamples)
        .def("enableAudio", &Player::enableAudio)
        .def("loadFile", &Player::loadFile)
        .def("loadString", &Player::loadString)
        .def("loadCanvasFile", &Player::loadCanvasFile)
        .def("loadCanvasString", &Player::loadCanvasString)
        .def("deleteCanvas", &Player::deleteCanvas)
        .def("getMainCanvas", &Player::getMainCanvas)
        .def("getCanvas", &Player::getCanvas)
        .def("play", &Player::play)
        .def("stop", &Player::stop)
        .def("isPlaying", &Player::isPlaying)
        .def("setFramerate", &Player::setFramerate)
        .def("setVBlankFramerate", &Player::setVBlankFramerate)
        .def("getEffectiveFramerate", &Player::getEffectiveFramerate)
        .def("getTestHelper", &Player::getTestHelper,
                return_value_policy<reference_existing_object>())
        .def("setFakeFPS", &Player::setFakeFPS)
        .def("getFrameTime", &Player::getFrameTime)
        .def("getFrameDuration", &Player::getFrameDuration)
        .def("createNode", &Player::createNodeFromXmlString)
        .def("createNode", &Player::createNode)
        .def("addTracker", &Player::addTracker,
                return_value_policy<reference_existing_object>())
        .def("enableMultitouch", &Player::enableMultitouch)
        .def("getTracker", &Player::getTracker,
                return_value_policy<reference_existing_object>())
        .def("setInterval", &Player::setInterval)
        .def("setTimeout", &Player::setTimeout)
        .def("setOnFrameHandler", &Player::setOnFrameHandler)
        .def("clearInterval", &Player::clearInterval)
        .def("getMouseState", &Player::getMouseState)
        .def("getKeyModifierState", &Player::getKeyModifierState)
        .def("screenshot", &Player::screenshot)
        .def("stopOnEscape", &Player::setStopOnEscape)
        .def("showCursor", &Player::showCursor)
        .def("setCursor", &Player::setCursor)
        .def("getElementByID", &Player::getElementByID)
        .def("getRootNode", &Player::getRootNode)
        .def("getFramerate", &Player::getFramerate)
        .def("getVideoRefreshRate", &Player::getVideoRefreshRate)
        .def("setGamma", &Player::setGamma)
        .def("setMousePos", &Player::setMousePos)
        .def("loadPlugin", &Player::loadPlugin)
        .def("setEventHook", &Player::setEventHook)
        .def("getEventHook", &Player::getEventHook)
        .add_property("pluginPath", &Player::getPluginPath, &Player::setPluginPath)
        .add_property("volume", &Player::getVolume, &Player::setVolume)
    ;

    class_<Canvas, boost::shared_ptr<Canvas>, boost::noncopyable>("Canvas", no_init)
        .def(self == self)
        .def(self != self)
        .def("__hash__", &Canvas::getHash)
        .def("getRootNode", &Canvas::getRootNode)
        .def("getElementByID", &Canvas::getElementByID)
        .def("screenshot", &Canvas::screenshot)
    ;

    class_<OffscreenCanvas, boost::shared_ptr<OffscreenCanvas>, bases<Canvas>,
            boost::noncopyable>("OffscreenCanvas", no_init)
        .def("getID", &OffscreenCanvas::getID)
        .def("render", &OffscreenCanvas::render)
        .def("registerCameraNode", &OffscreenCanvas::registerCameraNode)
        .def("unregisterCameraNode", &OffscreenCanvas::unregisterCameraNode)
        .add_property("handleevents", &OffscreenCanvas::getHandleEvents)
        .add_property("multisamplesamples", &OffscreenCanvas::getMultiSampleSamples)
        .add_property("mipmap", &OffscreenCanvas::getMipmap)
        .add_property("autorender", &OffscreenCanvas::getAutoRender,
                &OffscreenCanvas::setAutoRender)
        .def("getNumDependentCanvases", &OffscreenCanvas::getNumDependentCanvases)
        .def("isMultisampleSupported", &OffscreenCanvas::isMultisampleSupported)
        .staticmethod("isMultisampleSupported")
    ;
}
