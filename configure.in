AC_PREREQ(2.53)
AC_INIT(libavg, 0.8.0, uzadow@libavg.de)
AC_CANONICAL_TARGET

AC_DISABLE_STATIC
AC_PROG_LIBTOOL

MAJOR_VERSION=0
MINOR_VERSION=8
MICRO_VERSION=0
VERSION=$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION dnl

AC_SUBST(VERSION)
AC_CONFIG_SRCDIR([src/avgconfig.h.in])
AM_INIT_AUTOMAKE(check-news dist-zip)
# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
CXXFLAGS="-Wno-invalid-offsetof $CXXFLAGS"
OBJC="gcc"
OBJCFLAGS=""
OBJCLDFLAGS="-lobjc"
AC_SUBST(OBJC)
AC_SUBST(OBJCFLAGS)
AC_SUBST(OBJCLDFLAGS)
_AM_DEPENDENCIES([OBJC])

AC_PATH_GENERIC(xml2,,,AC_MSG_ERROR([libxml2 not found. Aborting.]))
PKG_CHECK_MODULES([PANGOFT2], [pangoft2])
AC_PATH_GENERIC(freetype,,,AC_MSG_ERROR([libfreetype not found. Aborting.]))

PKG_CHECK_MODULES([MAGICK], [GraphicsMagick++])

PKG_CHECK_MODULES([FFMPEG], [libavcodec libavformat], [LIBFFMPEG="$FFMPEG_LIBS"], [:])
AC_SUBST(LIBFFMPEG)

AM_PATH_PYTHON

AM_CHECK_PYTHON_HEADERS
AM_CHECK_PYTHON_LIB
if test -z "$PYTHON_INCLUDES" || test -z "$PYTHON_LIBS"; then
  AC_MSG_ERROR([could not find files required to build python plugin])
fi

AC_ARG_VAR(BOOST_PYTHON_LIBS, [linker flags for BOOST, defaults to -lboost_python])
if test -z "$BOOST_PYTHON_LIBS"
then
  AC_CHECK_LIB(boost_python, main, libboost_python_installed=yes, , $PYTHON_LIBS)
  if test -z "$libboost_python_installed"
  then
    AC_MSG_ERROR([boost.python not found. Aborting.])
  fi
  BOOST_PYTHON_LIBS="-lboost_python"
fi
    
AX_BOOST_THREAD
if test -z "$BOOST_THREAD_LIB"; then
   AC_MSG_ERROR([boost.thread not found. Aborting.])
fi

#AC_CHECK_LIB(boost_thread, main, libboost_thread_installed=yes, , )
#if test -z "$libboost_thread_installed"
#then
#    # TODO: Check for boost_thread_mt here.
#    AC_MSG_ERROR([boost.thread not found. Aborting.])
#fi
    
AC_ARG_ENABLE(dc1394,
              AC_HELP_STRING([--enable-dc1394], 
                    [compile support for firewire cameras]),
                    enable_1394=$enableval, enable_1394=maybe)
if test "$enable_1394" = maybe; then
    AC_CHECK_LIB(dc1394_control, main, enable_1394=yes, enable_1394=no, -lraw1394)
    PKG_CHECK_MODULES([DC1394_2], [libdc1394-2],,AC_MSG_NOTICE([libdc1394 ver 2 not found]))
fi
AM_CONDITIONAL(ENABLE_1394, test x$enable_1394 = xyes)
AM_CONDITIONAL(ENABLE_1394_2, test x"$DC1394_2_LIBS" != x )
if test "$enable_1394" = yes; then
    AC_DEFINE(AVG_ENABLE_1394, 1, [Enable firewire camera support])
else
    if test x"$DC1394_2_LIBS" != "x"; then
        AC_DEFINE(AVG_ENABLE_1394_2, 1, [Enable firewire camera support v.2])
    fi
fi 

AC_ARG_ENABLE(v4l2,
          AC_HELP_STRING([--enable-v4l2],
                 [compile support for video4linux v2 video devices]),
                 enable_v4l2=$enableval, enable_v4l2=maybe)
if test "$enable_v4l2" = maybe; then
    AC_CHECK_TYPE([struct v4l2_buffer],
        [enable_v4l2=yes],
        [enable_v4l2=no],
        [#include <sys/time.h>
         #include <linux/videodev.h>])
fi
AM_CONDITIONAL(ENABLE_V4L2, test x$enable_v4l2 = xyes)
if test "$enable_v4l2" = yes; then
    AC_DEFINE(AVG_ENABLE_V4L2, 1, [Enable Video4Linux2 camera support])
fi

AC_CHECK_HEADER([linux/ppdev.h], enable_ParPort=yes, enable_ParPort=no)
AM_CONDITIONAL(ENABLE_PARPORT, test x$enable_ParPort = xyes)
if test "$enable_ParPort" = yes; then
    AC_DEFINE(AVG_ENABLE_PARPORT, 1, [Enable parallel port support])
fi 

AX_CHECK_GL
AX_CHECK_GLU

AM_PATH_SDL(1.2.10,:,AC_MSG_ERROR([libSDL not found. Aborting.]))

if test x"$GL_LIBS" = x; then
    AC_MSG_ERROR([OpenGL not found. Aborting])
fi

AM_CONDITIONAL(APPLE, test $target_vendor = apple)

PREFIX=$prefix
AC_SUBST(PREFIX)
AM_CONFIG_HEADER(src/avgconfig.h)
AC_OUTPUT(Makefile src/Makefile src/test/Makefile src/test/plugin/Makefile
    src/base/Makefile src/conradrelais/Makefile src/lmfit/Makefile src/wrapper/Makefile 
    src/player/Makefile src/parport/Makefile src/graphics/Makefile src/python/Makefile
    src/imaging/Makefile src/video/Makefile src/audio/Makefile src/utils/Makefile)
