AC_PREREQ(2.53)
AC_INIT(libavg, 0.5.10.rc1, coder@c-base.org)
AC_CANONICAL_TARGET

AC_DISABLE_STATIC
AC_PROG_LIBTOOL

MAJOR_VERSION=0
MINOR_VERSION=5
MICRO_VERSION=10
VERSION=$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION dnl

AC_SUBST(VERSION)
AC_CONFIG_SRCDIR([src/avgconfig.h.in])
AM_INIT_AUTOMAKE(check-news dist-zip)
# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
OBJC="gcc"
OBJCFLAGS=""
OBJCLDFLAGS="-lobjc"
AC_SUBST(OBJC)
AC_SUBST(OBJCFLAGS)
AC_SUBST(OBJCLDFLAGS)
_AM_DEPENDENCIES([OBJC])

AC_PATH_GENERIC(xml2,,,AC_MSG_ERROR([libxml2 not found. Aborting.]))
PKG_CHECK_MODULES([PANGOFT2], [pangoft2])
AC_PATH_GENERIC(freetype,,,AC_MSG_ERROR([libfreetype not found. Aborting.]))

PKG_CHECK_MODULES([MAGICK], [ImageMagick++])
#AC_CHECK_PROG(magick_installed, [Magick++-config], "yes")
#if test -z "$magick_installed"
#then
#    AC_MSG_ERROR([ImageMagick not found. Aborting.])
#fi

AM_LIB_FFMPEG

AM_PATH_PYTHON

AM_CHECK_PYTHON_HEADERS
AM_CHECK_PYTHON_LIB
if test -z "$PYTHON_INCLUDES" || test -z "$PYTHON_LIBS"; then
  AC_MSG_ERROR([could not find files required to build python plugin])
fi

AC_CHECK_LIB(boost_python, main, libboost_python_installed=yes, , $PYTHON_LIBS)
if test -z "$libboost_python_installed"
then
    AC_MSG_ERROR([boost.python not found. Aborting.])
fi
    
AC_ARG_ENABLE(dc1394,
              AC_HELP_STRING([--enable-dc1394], 
                    [compile support for firewire cameras]),
                    enable_1394=$enableval, enable_1394=maybe)
if test "$enable_1394" = maybe; then
    AC_CHECK_LIB(dc1394_control, main, enable_1394=yes, enable_1394=no, -lraw1394)
fi
AM_CONDITIONAL(ENABLE_1394, test x$enable_1394 = xyes)
if test "$enable_1394" = yes; then
    AC_DEFINE(AVG_ENABLE_1394, 1, [Enable firewire camera support])
fi 

AC_ARG_ENABLE(DFB,
              AC_HELP_STRING([--enable-DFB], 
                    [compile support for DirectFB rendering backend]),
                    enable_DFB=$enableval, enable_DFB=maybe, )
if test "$enable_DFB" = maybe; then
    AC_PATH_GENERIC(directfb,, [enable_DFB=yes], [enable_DFB=false])
fi
AM_CONDITIONAL(ENABLE_DFB, test x$enable_DFB = xyes)
if test "$enable_DFB" = yes; then
    AC_DEFINE(AVG_ENABLE_DFB, 1, [Enable DirectFB rendering backend])
fi

AC_CHECK_HEADER([linux/ppdev.h], enable_ParPort=yes, enable_ParPort=no)
AM_CONDITIONAL(ENABLE_PARPORT, test x$enable_ParPort = xyes)
if test "$enable_ParPort" = yes; then
    AC_DEFINE(AVG_ENABLE_PARPORT, 1, [Enable parallel port support])
fi 

AC_ARG_ENABLE(GL,
              AC_HELP_STRING([--enable-GL], 
                    [compile support for OpenGL rendering backend]),
                    enable_GL=$enableval, enable_GL=maybe, )
if (test "$enable_GL" = maybe) || (test "$enable_GL" = yes); then
    AX_CHECK_GL
    AX_CHECK_GLU
    AC_PATH_GENERIC(sdl,,,AC_MSG_ERROR([libSDL not found. Aborting.]))
    AC_CHECK_PROG(sdl_installed, [sdl-config], "yes")
fi
AM_CONDITIONAL(ENABLE_GL, 
    (test $enable_GL = yes) || ([test x$no_GL != xyes] && [test x$sdl_installed = xyes]))

if (test $enable_GL = yes) || ([test x$no_GL != xyes] && [test x$sdl_installed = xyes]); then
    AC_DEFINE(AVG_ENABLE_GL, 1, [Enable OpenGL rendering backend])
    AC_MSG_NOTICE([Enabling OpenGL])
else
    AC_MSG_NOTICE([Disabling OpenGL])
fi
    
AM_CONDITIONAL(APPLE, test $target_vendor = apple)

AM_CONFIG_HEADER(src/avgconfig.h)
AC_OUTPUT(Makefile src/Makefile man/Makefile src/test/Makefile 
    src/base/Makefile src/conradrelais/Makefile src/python/Makefile 
    src/player/Makefile src/parport/Makefile src/graphics/Makefile)
